{
    "collab_server" : "",
    "contents" : "remove(list=ls())\n\nlibrary(PortfolioAnalytics)\nlibrary(quantmod)\nlibrary(PerformanceAnalytics)\nlibrary(zoo)\nlibrary(plotly)\n\nlibrary(ROI)\nrequire(ROI.plugin.glpk)\nrequire(ROI.plugin.quadprog)\n\n# Get data\ngetSymbols(c(\"MSFT\", \"SBUX\", \"IBM\", \"AAPL\", \"^GSPC\", \"AMZN\"))\n\n# Get adjusted prices\nprices.data <- merge.zoo(MSFT[,6], SBUX[,6], IBM[,6], AAPL[,6], GSPC[,6], AMZN[,6])\n\n# Calculate returns\nreturns.data <- CalculateReturns(prices.data)\nreturns.data <- na.omit(returns.data)\n\n# Set names\ncolnames(returns.data) <- c(\"MSFT\", \"SBUX\", \"IBM\", \"AAPL\", \"GSPC\", \"AMZN\")\n\n# Load data\nreturns.fund <- read.csv.zoo('~/Fund/Returns.csv', format='%b %Y')\n\n# Save mean return vector and sample covariance matrix\nmeanReturns <- colMeans(returns.data)\ncovMat <- cov(returns.data)\n\n# Start Portfolio with the names of the assets\nport <- portfolio.spec(assets = c(\"MSFT\", \"SBUX\", \"IBM\", \"AAPL\", \"GSPC\", \"AMZN\"))\n\n# Box and Leverage\nport <- add.constraint(port, type = \"box\", min = 0.00, max = 1.00)\nport <- add.constraint(port, type = \"full_investment\")\n\n# Generate random portfolios\nrportfolios <- random_portfolios(port, permutations = 500, rp_method = \"sample\")\n\n# Get minimum variance portfolio\nminvar.port <- add.objective(port, type = \"risk\", name = \"var\")\n\n# Optimize\nminvar.opt <- optimize.portfolio(returns.data,\n                                 minvar.port,\n                                 optimize_method = \"random\", \n                                 rp = rportfolios)\n\n# Generate maximum return portfolio\nmaxret.port <- add.objective(port, type = \"return\", name = \"mean\")\n\n# Optimize\nmaxret.opt <- optimize.portfolio(returns.data,\n                                 maxret.port,\n                                 optimize_method = \"random\", \n                                 rp = rportfolios)\n\n# Generate vector of returns\nminret <- 0.06/100\nmaxret <- maxret.opt$weights %*% meanReturns\nvec <- seq(minret, maxret, length.out = 100)\neff.frontier <- data.frame(Risk = rep(NA, length(vec)),\n                           Return = rep(NA, length(vec)), \n                           SharpeRatio = rep(NA, length(vec)))\nfrontier.weights <- mat.or.vec(nr = length(vec), nc = ncol(returns.data))\ncolnames(frontier.weights) <- colnames(returns.data)\nfor (i in 1:length(vec)) {\n  eff.port <- add.constraint(port, type = \"return\", name = \"mean\", return_target = vec[i])\n  eff.port <- add.objective(eff.port, type = \"risk\", name = \"var\")\n  # eff.port <- add.objective(eff.port, type = \"weight_concentration\", name = \"HHI\",\n  #                            conc_aversion = 0.001)\n  eff.port <- optimize.portfolio(returns.data, eff.port, optimize_method = \"ROI\")\n  eff.frontier$Risk[i] <- sqrt(t(eff.port$weights) %*% covMat %*% eff.port$weights)\n  eff.frontier$Return[i] <- eff.port$weights %*% meanReturns\n  eff.frontier$SharpeRatio[i] <- eff.frontier$Return[i] / eff.frontier$Risk[i]\n  frontier.weights[i,] = eff.port$weights\n  print(paste(round(i/length(vec) * 100, 0), \"% done...\"))\n}\n\nFeasiblePortfolios <- data.frame(Risk = rep(NA, length(rportfolios)/6),\n                                 Return = rep(NA, length(rportfolios)/6),\n                                 SharpeRatio = rep(NA, length(rportfolios)/6) )\n\nFeasiblePortfolios$Risk <- apply(rportfolios, 1, function(x){\n  return(sqrt(matrix(x, nrow = 1) %*% covMat %*% matrix(x, ncol = 1)))\n}\n)\nFeasiblePortfolios$Return <- apply(rportfolios, 1, function(x){\n  return(x %*% meanReturns)\n}\n)\nFeasiblePortfolios$SharpeRatio <- FeasiblePortfolios$Return/FeasiblePortfolios$Risk\n\np <- plot_ly(data = FeasiblePortfolios, x = ~Risk, y = ~Return,\n             color = ~SharpeRatio,\n             name = \"Feasible Portfolios\",\n             mode = \"markers\", type = \"scatter\",\n             showlegend = F,\n             marker = list(size = 3, opacity = 0.5,\n                           colorbar = list(title = \"Sharpe Ratio\") ),\n             hoverinfo = 'text',\n             text = ~paste('Feasible Portfolios',\n                           '</br>St.dev: ', format(100*Risk, digits=2), '%',\n                           '</br>Return: ', format(100*Return, digits=2), '%', #sep=''\n                           '</br>Return: ', round(100*Return, 2), '%', sep='' )\n) %>%\n  \n  add_trace(data = eff.frontier, x = ~Risk, y = ~Return,\n            name = \"Efficient Frontier\",\n            mode = \"markers\", type = \"scatter\",\n            showlegend = F,\n            marker = list(color = \"#F7C873\",\n                          size = 2),\n            hoverinfo = 'text',\n            text = ~paste('Efficient Frontier',\n                          '</br>St.dev: ', format(100*Risk, digits=2), '%',\n                          '</br>Return: ', format(100*Return, digits=2), '%', #sep=''\n                          '</br>Return: ', round(100*Return, 2), '%', sep='' )\n  ) %>%\n  \n  layout(title = \"Random Portfolios with Plotly\",\n         yaxis = list(title = \"Mean Returns\", showgrid = F, tickformat = \".2%\"),\n         xaxis = list(title = \"Standard Deviation\", showgrid = F, tickformat = \".1%\")\n         # annotations = list(list(x = 0.4, y = 0.75,\n         #                         ax = -30, ay = -30,\n         #                         text = \"Efficient frontier\",\n         #                         font = list(color = \"#F6E7C1\",\n         #                                     size = 15),\n         #                         arrowcolor = \"white\")\n         #                    )\n  )\n",
    "created" : 1487353345075.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3560115295",
    "id" : "B4C6E898",
    "lastKnownWriteTime" : 1487353360,
    "last_content_update" : 1487353360232,
    "path" : "~/Fund/R/Portfolio/Plotly.R",
    "project_path" : "Plotly.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}